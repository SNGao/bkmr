tuition_income
tuition_cost_combined
tuition_income
? merge
colnames(tuition_cost_combined)
data_combined <- merge(tuition_cost_combined, tuition_income, by = 'name')
View(data_combined)
colnames(tuition_income)
tuition_income_2 %>%
tuition_income[, -c(3,7)]
tuition_income_2 = tuition_income[, -c(3,7)]
data_combined <- merge(tuition_cost_combined, tuition_income_2, by = 'name')
data_combined
tuition_income_2 = unique(tuition_income_2)
tuition_income_2
data_combined <- merge(tuition_cost_combined, tuition_income_2, by = 'name')
data_combined
colnames(data_combined)
data_combined %>% select(year == 2012)
data_combined
data_combined %>% select(year = 2012)
data_combined
data_combined <- data_combined[data_combined$year == 2012, ]
data_combined <- unique(data_combined[data_combined$year == 2012, ])
data_combined
tuition_cost_combined
library(bkmr)
colnames(tuition_cost_combined)
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data$state = as.integer(as.factor(data$state))
data$degree_length = as.integer(as.factor(data$degree_length))
data_unique <- unique(data)
data_unique %>% select(room_and_board)
data_unique
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
X <- as.matrix(data_unique[, c(3)])
temp <-  kmbayes(y=y, Z=as.matrix(data_unique[, c(2,3)]), X=covariates,
iter=100, verbose=FALSE,
varsel=TRUE, knots=knots100) # MCMC迭代100次后的拟合结果
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 10000, verbose = FALSE, varsel = TRUE)
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
table(data$in_state_total)
data = data[data$out_of_state_total > 30000,]
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data = data[data$out_of_state_total < 30000,]
data = data[data$out_of_state_total < 20000,]
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data = data[data$out_of_state_total < 20000,]
data = data[data$out_of_state_total < 10000,]
data_unique = unique(data[data$out_of_state_total < 10000,])
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
Z <- as.matrix(data_unique[, c(1,2,8)])
Z
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 10000,])
data_unique
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
Z
data_unique = unique(data[data$out_of_state_total < 10000,])
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
data_unique$state = as.integer(as.factor(data_unique$state))
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
X <- as.matrix(data_unique[, c(3,1)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
data_unique = unique(data[data$out_of_state_total < 20000,])
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 20000,])
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
data_unique$state = as.integer(as.factor(data_unique$state))
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
pred.resp.univar <- PredictorResponseUnivar(fit = fitkm)
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
ylab("h(z)")
data_unique = scale(data_unique)
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 20000,])
dim(data_unique)
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
data_unique$state = as.integer(as.factor(data_unique$state))
data_unique = scale(data_unique)
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 20000,])
dim(data_unique)
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
data_unique$state = as.integer(as.factor(data_unique$state))
data_unique[,-1] = scale(data_unique[,-1])
y <- as.matrix(data_unique$out_of_state_total)
Z <- as.matrix(data_unique[, c(1,2,8)])
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
ylab("h(z)")
pred.resp.bivar <- PredictorResponseBivar(fit = fitkm, min.plot.dist = 1)
pred.resp.bivar <- PredictorResponseBivar(fit = fitkm, min.plot.dist = 1)
ggplot(pred.resp.bivar, aes(z1, z2, fill = est)) +
geom_raster() +
facet_grid(variable2 ~ variable1) +
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF")) +
xlab("expos1") +
ylab("expos2") +
ggtitle("h(expos1, expos2)")
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
dim(data_unique)
dat <- SimData(n = dim(data_unique)[1], M = 4)
dat
Z <- as.matrix(data_unique[, c(1,2,8)], dat$Z)
Z
data_unique[, c(1,2,8)]
dat$Z
Z <- cbind(as.matrix(data_unique[, c(1,2,8)],), dat$Z)
y <- as.matrix(data_unique$out_of_state_total)
Z <- cbind(as.matrix(data_unique[, c(1,2,8)],), dat$Z)
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
pred.resp.univar <- PredictorResponseUnivar(fit = fitkm)
library(ggplot2)
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
ylab("h(z)")
pred.resp.bivar <- PredictorResponseBivar(fit = fitkm, min.plot.dist = 1)
ggplot(pred.resp.bivar, aes(z1, z2, fill = est)) +
geom_raster() +
facet_grid(variable2 ~ variable1) +
scale_fill_gradientn(colours=c("#0000FFFF","#FFFFFFFF","#FF0000FF")) +
xlab("expos1") +
ylab("expos2") +
ggtitle("h(expos1, expos2)")
TracePlot(fit = fitkm, par = "beta")
TracePlot(fit = fitkm, par = "r", comp = 1)
TracePlot(fit = fitkm, par = "sigsq.eps")
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
ylab("h(z)")
data_unique
?scale
scale(data_unique[,-1])
data_unique[,-1] = scale(data_unique[,-1])
data_unique
data_unique[,c(2:8)] = scale(data_unique[,c(2:8)])
data_unique
y <- as.matrix(data_unique$out_of_state_total)
Z <- cbind(as.matrix(data_unique[, c(1,2,8)],), dat$Z)
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
TracePlot(fit = fitkm, par = "beta")
#
pred.resp.univar <- PredictorResponseUnivar(fit = fitkm)
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
ylab("h(z)")
colnames(data_unique)
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 20000,])
dat <- SimData(n = dim(data_unique)[1], M = 4) # introduce some nuisance data
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
data_unique$state = as.integer(as.factor(data_unique$state))
data_unique[,c(1:8)] = scale(data_unique[,c(1:8)])
y <- as.matrix(data_unique$out_of_state_total)
Z <- cbind(as.matrix(data_unique[, c(1,2,8)],), dat$Z)
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
ExtractPIPs(fitkm)
#
pred.resp.univar <- PredictorResponseUnivar(fit = fitkm)
library(ggplot2)
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
ylab("h(z)")
library(purrr)
?TracePlot
?TracePlot
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
labs(title = "The distribution of the income difference",
subtitle = 'relative to the same jobclass/education group at different ages',
caption = "Data from the Chronicle of Higher Education",
x = "Age", y = "Wage")
tuition_cost_combined %>%
group_by(state) %>%
filter(room_and_board>10000) %>%
mutate(Mean_diff = out_of_state_total - mean(out_of_state_total)) %>%
ggplot(aes(x = state, y = Mean_diff)) +
geom_histogram(stat = "identity", fill = rainbow(931)) +
labs(title = "The distribution of the total cost out of state difference in each state",
subtitle = 'relative to the mean level at different state',
caption = "Data from the Chronicle of Higher Education",
x = "State", y = "The difference bewteen mean value and observations in each group") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=8))
TracePlot(fit = fitkm, par = "beta",
main = "Investigate model convergence",
xlab = "iteration",
ylab = "parameter value")
?TracePlot
TracePlot(fit = fitkm, par = "beta",
main = "Investigate model convergence",
xlab = "iteration",
ylab = "parameter value",
sub = "Subtitle")
TracePlot(fit = fitkm, par = "beta",
main = "Investigate model convergence",
xlab = "iteration",
ylab = "parameter value")+title(sub="Subtitle")
TracePlot(fit = fitkm, par = "beta",
main = "Investigate model convergence",
xlab = "iteration",
ylab = "parameter value") + title(sub="Subtitle") + legend("topright", legend="Data Points", pch=1, col="blue")
TracePlot(fit = fitkm, par = "beta",
main = "Investigate model convergence",
xlab = "iteration",
ylab = "parameter value",
legend = 'Data from the Chronicle of Higher Education') + title(sub="Subtitle")
library(bkmr)
colnames(tuition_cost_combined)
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 20000,])
dat <- SimData(n = dim(data_unique)[1], M = 4) # introduce some nuisance data
data_unique$degree_length = as.integer(as.factor(data_unique$degree_length))
data_unique$state = as.integer(as.factor(data_unique$state))
data_unique[,c(1:8)] = scale(data_unique[,c(1:8)])
y <- as.matrix(data_unique$out_of_state_total)
Z <- cbind(as.matrix(data_unique[, c(1,2,8)],), dat$Z)
X <- as.matrix(data_unique[, c(3)])
fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 1000, verbose = FALSE, varsel = TRUE)
# A posteriori inclusion probability in a simulated data set (the bigger the better)
#TracePlot(fit = fitkm, par = "r", comp = 1)
#TracePlot(fit = fitkm, par = "sigsq.eps")
pred.resp.univar <- PredictorResponseUnivar(fit = fitkm)
library(ggplot2)
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
labs(title = "The univariate relationship between specific exposure and the outcome",
subtitle = 'All variables have been standarized to 0~1',
caption = "Data from the Chronicle of Higher Education",
x = "Scaled Value", y = "h(z)")
ExtractPIPs(fitkm)
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data = tuition_cost_combined[, c('room_and_board',
'degree_length',
'mean_room_and_board',
'room_and_board',
'in_state_tuition',
'in_state_total',
'out_of_state_total',
'state')]
data_unique = unique(data[data$out_of_state_total < 20000,])
dat <- SimData(n = dim(data_unique)[1], M = 4) # introduce some nuisance data
string_to_integer <- function(column) {
as.integer(as.factor(column))
}
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
labs(title = "The univariate relationship between specific exposure and the total cost",
subtitle = 'All variables have been standarized to 0~1',
caption = "Data from the Chronicle of Higher Education",
x = "Scaled Value", y = "h(z)")
ggplot(pred.resp.univar, aes(z, est, ymin = est - 1.96*se, ymax = est + 1.96*se)) +
geom_smooth(stat = "identity") +
facet_wrap(~ variable) +
labs(title = "The univariate relationship between specific exposure and the total cost",
subtitle = 'All variables have been standarized to 0~1',
caption = "Data from the Chronicle of Higher Education",
x = "Scaled Value", y = "h(z)")
str(data_unique)
string_to_integer <- function(column) {
as.integer(as.factor(column))
}
str(data_unique)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], convert_to_integer)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
data_unique
str(data_unique)
data_unique[, c(2,8)] <- map_dbl(data_unique[, c(2,8)], string_to_integer)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
data_unique
## explore linear regression
by_degree <- split(data_unique, data_unique$degree_length)
by_degree
data_unique = unique(data[data$out_of_state_total < 20000,])
map(data_unique[, c(2,8)], string_to_integer)
as.character
as.character()
as.factor
map(data_unique[, c(2,8)], as.integer(as.factor))
as.integer(as.factor)
as.integer(as.factor())
map(data_unique[, c(2,8)], as.integer(as.factor()))
data_unique[, c(2,8)] <- map_dbl(data_unique[, c(2,8)], as.factor)
as.factor
data_unique[, c(2,8)]
data_unique[, c(2,8)] <- map_dbl(data_unique[, c(2,8)], as.character)
data_unique[, c(2,8)]
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef) |>
map_dbl(2)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map_dbl(.f = coef)
data_unique[, c(2,8)] <- map_chr(data_unique[, c(2,8)], as.character)
data_unique[, c(2,8)] <- map_chr(.x = data_unique[, c(2,8)], as.character)
data_unique[, c(2,8)] <- map_chr(.x = data_unique[, c(2,8)], .f = typeof)
data_unique
data_unique[, c(2,8)] <- map_chr(.x = data_unique[, c(2,8)], .f = as.character())
tolower()
tolower
data_unique[, c(2,8)] <- map_chr(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[, c(2,8)]
data_unique = unique(data[data$out_of_state_total < 20000,])
data_unique[, c(2,8)] <- map(.x = data_unique[, c(2,8)], .f = tolower)
data_unique
## transform data
string_to_integer <- function(column) {
as.factor(as.character(column))
}
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map_dbl(.f = coef)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef) |>
map_dbl(2)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef) |>
map_dfr(2)
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique = unique(data[data$out_of_state_total < 20000,])
## transform data
string_to_integer <- function(column) {
as.factor(as.character(column))
}
str(data_unique)
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[,c(1:8)] = scale(data_unique[,c(1:8)])
## transform data
string_to_integer <- function(column) {
as.factor(as.character(column))
}
str(data_unique)
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], as.integer(as.factor()))
## transform data
string_to_integer <- function(column) {
as.factor(as.character(column))
}
str(data_unique)
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
data_unique[,c(1:8)] = scale(data_unique[,c(1:8)])
data_unique
## transform data
string_to_integer <- function(column) {
as.factor(as.character(column))
}
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
data_unique
## transform data
string_to_integer <- function(column) {
as.integer(as.factor(column))
}
str(data_unique)
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
data_unique[,c(1:8)] = scale(data_unique[,c(1:8)])
## explore linear regression
by_degree <- split(data_unique, data_unique$degree_length)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef) |>
map(2)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef)
data_unique = unique(data[data$out_of_state_total < 20000,])
## transform data
string_to_integer <- function(column) {
as.integer(as.factor(column))
}
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
## explore linear regression
by_degree <- split(data_unique, data_unique$degree_length)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef)
data_unique = unique(data[data$out_of_state_total < 20000,])
## explore linear regression
by_degree <- split(data_unique, data_unique$degree_length)
by_degree |>
map(.f = ~ lm(out_of_state_total ~ state, data = .x)) |>
map(.f = coef)
## transform data
string_to_integer <- function(column) {
as.integer(as.factor(column))
}
data_unique[, c(2,8)] <- map_dfc(.x = data_unique[, c(2,8)], .f = tolower)
data_unique[, c(2,8)] <- map(data_unique[, c(2,8)], string_to_integer)
library(bkmr)
library(bkmr)
library(bkmr)
library(bkmr)
devtools::install_github("https://github.com/SNGao/bkmr", build_vignettes = TRUE)
browseVignettes("bkmr")
library(bkmr)
library(bkmr)
