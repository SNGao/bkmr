[{"path":"https://sngao.github.io/bkmr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jennifer F. Bobb. Author, maintainer.","code":""},{"path":"https://sngao.github.io/bkmr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bobb J (2023). bkmr: Bayesian Kernel Machine Regression. R package version 0.2.2, https://sngao.github.io/bkmr/, https://github.com/jenfb/bkmr.","code":"@Manual{,   title = {bkmr: Bayesian Kernel Machine Regression},   author = {Jennifer F. Bobb},   year = {2023},   note = {R package version 0.2.2, https://sngao.github.io/bkmr/},   url = {https://github.com/jenfb/bkmr}, }"},{"path":"https://sngao.github.io/bkmr/reference/ComputePostmeanHnew.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","title":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","text":"Compute posterior mean variance h new predictor values","code":""},{"path":"https://sngao.github.io/bkmr/reference/ComputePostmeanHnew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","text":"","code":"ComputePostmeanHnew(   fit,   y = NULL,   Z = NULL,   X = NULL,   Znew = NULL,   sel = NULL,   method = \"approx\" )"},{"path":"https://sngao.github.io/bkmr/reference/ComputePostmeanHnew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. Znew matrix new predictor values predict new h, row represents new observation. set NULL default using observed exposures Z. sel selects iterations MCMC sampler use inference; see details method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details","code":""},{"path":"https://sngao.github.io/bkmr/reference/ComputePostmeanHnew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","text":"list length two containing posterior mean vector posterior variance matrix","code":""},{"path":"https://sngao.github.io/bkmr/reference/ComputePostmeanHnew.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","text":"method == \"approx\", argument sel defaults second half MCMC iterations. method == \"exact\", argument sel defaults keeping every 10 iterations dropping first 50% samples, results fewer 100 iterations, 100 iterations kept guided examples additional information, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/ComputePostmeanHnew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the posterior mean and variance of h at a new predictor values — ComputePostmeanHnew","text":"","code":"set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.01349 secs elapsed) #> Iteration: 20 (20% completed; 0.02375 secs elapsed) #> Iteration: 30 (30% completed; 0.03352 secs elapsed) #> Iteration: 40 (40% completed; 0.04456 secs elapsed) #> Iteration: 50 (50% completed; 0.05547 secs elapsed) #> Iteration: 60 (60% completed; 0.06639 secs elapsed) #> Iteration: 70 (70% completed; 0.07755 secs elapsed) #> Iteration: 80 (80% completed; 0.0888 secs elapsed) #> Iteration: 90 (90% completed; 0.10003 secs elapsed) #> Iteration: 100 (100% completed; 0.11126 secs elapsed)  med_vals <- apply(Z, 2, median) Znew <- matrix(med_vals, nrow = 1) h_true <- dat$HFun(Znew) h_est1 <- ComputePostmeanHnew(fitkm, Znew = Znew, method = \"approx\") h_est2 <- ComputePostmeanHnew(fitkm, Znew = Znew, method = \"exact\")"},{"path":"https://sngao.github.io/bkmr/reference/ExtractEsts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract summary statistics — ExtractEsts","title":"Extract summary statistics — ExtractEsts","text":"Obtain summary statistics parameter BKMR fit","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractEsts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract summary statistics — ExtractEsts","text":"","code":"ExtractEsts(fit, q = c(0.025, 0.25, 0.5, 0.75, 0.975), sel = NULL)"},{"path":"https://sngao.github.io/bkmr/reference/ExtractEsts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract summary statistics — ExtractEsts","text":"fit object containing results returned kmbayes function q vector quantiles sel logical expression indicating samples keep; defaults keeping second half samples","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractEsts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract summary statistics — ExtractEsts","text":"list component data frame containing summary statistics posterior distribution one parameters (vector parameters) estimated","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractEsts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract summary statistics — ExtractEsts","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00876 secs elapsed) #> Iteration: 20 (20% completed; 0.01833 secs elapsed) #> Iteration: 30 (30% completed; 0.02786 secs elapsed) #> Iteration: 40 (40% completed; 0.03844 secs elapsed) #> Iteration: 50 (50% completed; 0.04803 secs elapsed) #> Iteration: 60 (60% completed; 0.0636 secs elapsed) #> Iteration: 70 (70% completed; 0.07317 secs elapsed) #> Iteration: 80 (80% completed; 0.08293 secs elapsed) #> Iteration: 90 (90% completed; 0.09256 secs elapsed) #> Iteration: 100 (100% completed; 0.10223 secs elapsed)  ests <- ExtractEsts(fitkm) names(ests) #> [1] \"sigsq.eps\" \"beta\"      \"lambda\"    \"r\"         ests$beta #>          mean         sd   q_2.5     q_25     q_50     q_75   q_97.5 #> beta 1.889308 0.08175852 1.72388 1.839835 1.889967 1.941782 2.046596"},{"path":"https://sngao.github.io/bkmr/reference/ExtractPIPs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","title":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","text":"Extract posterior inclusion probabilities (PIPs) Bayesian Kernel Machine Regression (BKMR) model fit","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractPIPs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","text":"","code":"ExtractPIPs(fit, sel = NULL, z.names = NULL)"},{"path":"https://sngao.github.io/bkmr/reference/ExtractPIPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","text":"fit object containing results returned kmbayes function sel logical expression indicating samples keep; defaults keeping second half samples z.names optional argument providing names variables included h function.","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractPIPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","text":"data frame variable-specific PIPs BKMR fit component-wise variable selection, group-specific conditional (within-group) PIPs BKMR fit hierarchical variable selection.","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractPIPs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractPIPs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract posterior inclusion probabilities (PIPs) from BKMR model fit — ExtractPIPs","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.01192 secs elapsed) #> Iteration: 20 (20% completed; 0.02162 secs elapsed) #> Iteration: 30 (30% completed; 0.03127 secs elapsed) #> Iteration: 40 (40% completed; 0.04084 secs elapsed) #> Iteration: 50 (50% completed; 0.05635 secs elapsed) #> Iteration: 60 (60% completed; 0.06591 secs elapsed) #> Iteration: 70 (70% completed; 0.07551 secs elapsed) #> Iteration: 80 (80% completed; 0.08512 secs elapsed) #> Iteration: 90 (90% completed; 0.0947 secs elapsed) #> Iteration: 100 (100% completed; 0.10427 secs elapsed)  ExtractPIPs(fitkm) #>   variable  PIP #> 1       z1 1.00 #> 2       z2 1.00 #> 3       z3 0.00 #> 4       z4 0.28"},{"path":"https://sngao.github.io/bkmr/reference/ExtractSamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract samples — ExtractSamps","title":"Extract samples — ExtractSamps","text":"Extract samples parameter BKMR fit","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractSamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract samples — ExtractSamps","text":"","code":"ExtractSamps(fit, sel = NULL)"},{"path":"https://sngao.github.io/bkmr/reference/ExtractSamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract samples — ExtractSamps","text":"fit object containing results returned kmbayes function sel logical expression indicating samples keep; defaults keeping second half samples","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractSamps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract samples — ExtractSamps","text":"list component contains posterior samples one parameters (vector parameters) estimated","code":""},{"path":"https://sngao.github.io/bkmr/reference/ExtractSamps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract samples — ExtractSamps","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00882 secs elapsed) #> Iteration: 20 (20% completed; 0.01843 secs elapsed) #> Iteration: 30 (30% completed; 0.02805 secs elapsed) #> Iteration: 40 (40% completed; 0.04369 secs elapsed) #> Iteration: 50 (50% completed; 0.05328 secs elapsed) #> Iteration: 60 (60% completed; 0.06286 secs elapsed) #> Iteration: 70 (70% completed; 0.07252 secs elapsed) #> Iteration: 80 (80% completed; 0.08227 secs elapsed) #> Iteration: 90 (90% completed; 0.09179 secs elapsed) #> Iteration: 100 (100% completed; 0.10138 secs elapsed)  samps <- ExtractSamps(fitkm)"},{"path":"https://sngao.github.io/bkmr/reference/InvestigatePrior.html","id":null,"dir":"Reference","previous_headings":"","what":"Investigate prior — InvestigatePrior","title":"Investigate prior — InvestigatePrior","text":"Investigate impact r[m] parameters smoothness exposure-response function h(z[m]).","code":""},{"path":"https://sngao.github.io/bkmr/reference/InvestigatePrior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Investigate prior — InvestigatePrior","text":"","code":"InvestigatePrior(   y,   Z,   X,   ngrid = 50,   q.seq = c(2, 1, 1/2, 1/4, 1/8, 1/16),   r.seq = NULL,   Drange = NULL,   verbose = FALSE )"},{"path":"https://sngao.github.io/bkmr/reference/InvestigatePrior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Investigate prior — InvestigatePrior","text":"y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. ngrid Number grid points plot exposure-response function q.seq Sequence values corresponding different degrees smoothness estimated exposure-response function. value q corresponds fractions range data decay correlation cor(h[],h[j]) two subjects 50%. r.seq sequence values fix r estimating exposure-response function Drange range z_m data apply values q.seq. specified, calculated maximum ranges z_1 z_M. verbose TRUE FALSE: flag indicating whether print screen exposure variable q value completed","code":""},{"path":"https://sngao.github.io/bkmr/reference/InvestigatePrior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Investigate prior — InvestigatePrior","text":"list containing predicted values, residuals, estimated predictor-response function degree smoothness considered","code":""},{"path":"https://sngao.github.io/bkmr/reference/InvestigatePrior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Investigate prior — InvestigatePrior","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/InvestigatePrior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Investigate prior — InvestigatePrior","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  priorfits <- InvestigatePrior(y = y, Z = Z, X = X, q.seq = c(2, 1/2, 1/4, 1/16)) PlotPriorFits(y = y, Z = Z, X = X, fits = priorfits)"},{"path":"https://sngao.github.io/bkmr/reference/OverallRiskSummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate overall risk summaries — OverallRiskSummaries","title":"Calculate overall risk summaries — OverallRiskSummaries","text":"Compare estimated h function predictors particular quantile second fixed quantile","code":""},{"path":"https://sngao.github.io/bkmr/reference/OverallRiskSummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate overall risk summaries — OverallRiskSummaries","text":"","code":"OverallRiskSummaries(   fit,   y = NULL,   Z = NULL,   X = NULL,   qs = seq(0.25, 0.75, by = 0.05),   q.fixed = 0.5,   method = \"approx\",   sel = NULL )"},{"path":"https://sngao.github.io/bkmr/reference/OverallRiskSummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate overall risk summaries — OverallRiskSummaries","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. qs vector quantiles calculate overall risk summary q.fixed second quantile compare estimated h function method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details sel selects iterations MCMC sampler use inference; see details","code":""},{"path":"https://sngao.github.io/bkmr/reference/OverallRiskSummaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate overall risk summaries — OverallRiskSummaries","text":"data frame containing (posterior mean) estimate posterior standard deviation overall risk measures","code":""},{"path":"https://sngao.github.io/bkmr/reference/OverallRiskSummaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate overall risk summaries — OverallRiskSummaries","text":"method == \"approx\", argument sel defaults second half MCMC iterations. method == \"exact\", argument sel defaults keeping every 10 iterations dropping first 50% samples, results fewer 100 iterations, 100 iterations kept guided examples additional information, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/OverallRiskSummaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate overall risk summaries — OverallRiskSummaries","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00889 secs elapsed) #> Iteration: 20 (20% completed; 0.01869 secs elapsed) #> Iteration: 30 (30% completed; 0.02844 secs elapsed) #> Iteration: 40 (40% completed; 0.03808 secs elapsed) #> Iteration: 50 (50% completed; 0.04767 secs elapsed) #> Iteration: 60 (60% completed; 0.05774 secs elapsed) #> Iteration: 70 (70% completed; 0.06737 secs elapsed) #> Iteration: 80 (80% completed; 0.07704 secs elapsed) #> Iteration: 90 (90% completed; 0.25795 secs elapsed) #> Iteration: 100 (100% completed; 0.26832 secs elapsed)  risks.overall <- OverallRiskSummaries(fit = fitkm, qs = seq(0.25, 0.75, by = 0.05),  q.fixed = 0.5, method = \"exact\")"},{"path":"https://sngao.github.io/bkmr/reference/PlotPriorFits.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of exposure-response function from univariate KMR fit — PlotPriorFits","title":"Plot of exposure-response function from univariate KMR fit — PlotPriorFits","text":"Plot estimated h(z[m]) estimated frequentist KMR r[m] fixed specific values","code":""},{"path":"https://sngao.github.io/bkmr/reference/PlotPriorFits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of exposure-response function from univariate KMR fit — PlotPriorFits","text":"","code":"PlotPriorFits(   y,   X,   Z,   fits,   which.z = NULL,   which.q = NULL,   plot.resid = TRUE,   ylim = NULL,   ... )"},{"path":"https://sngao.github.io/bkmr/reference/PlotPriorFits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of exposure-response function from univariate KMR fit — PlotPriorFits","text":"y vector outcome data length n. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. fits output InvestigatePrior .z predictors (columns Z) plot .q q.values plot; defaults possible plot.resid whether plot data points ylim plotting limits y-axis ... plotting arguments","code":""},{"path":"https://sngao.github.io/bkmr/reference/PlotPriorFits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of exposure-response function from univariate KMR fit — PlotPriorFits","text":"return value, generates plot","code":""},{"path":"https://sngao.github.io/bkmr/reference/PlotPriorFits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of exposure-response function from univariate KMR fit — PlotPriorFits","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  priorfits <- InvestigatePrior(y = y, Z = Z, X = X, q.seq = c(2, 1/2, 1/4, 1/16)) PlotPriorFits(y = y, Z = Z, X = X, fits = priorfits)"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","title":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","text":"Predict exposure-response function new grid points","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","text":"","code":"PredictorResponseBivar(   fit,   y = NULL,   Z = NULL,   X = NULL,   z.pairs = NULL,   method = \"approx\",   ngrid = 50,   q.fixed = 0.5,   sel = NULL,   min.plot.dist = 0.5,   center = TRUE,   z.names = colnames(Z),   verbose = TRUE,   ... )"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. z.pairs data frame showing pairs predictors plot method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details ngrid number grid points dimension q.fixed vector quantiles fix remaining predictors Z sel logical expression indicating samples keep; defaults keeping second half samples min.plot.dist specifies minimum distance new grid point needs observed data point order compute prediction; points computed center flag whether scale exposure-response function mean zero z.names optional vector names columns z verbose TRUE FALSE: flag whether print intermediate output screen ... arguments pass prediction function","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","text":"long data frame name first predictor, name second predictor, value first predictor, value second predictor, posterior mean estimate, posterior standard deviation estimated exposure response function","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the exposure-response function at a new grid of points — PredictorResponseBivar","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00859 secs elapsed) #> Iteration: 20 (20% completed; 0.01804 secs elapsed) #> Iteration: 30 (30% completed; 0.02746 secs elapsed) #> Iteration: 40 (40% completed; 0.03687 secs elapsed) #> Iteration: 50 (50% completed; 0.04617 secs elapsed) #> Iteration: 60 (60% completed; 0.05553 secs elapsed) #> Iteration: 70 (70% completed; 0.06488 secs elapsed) #> Iteration: 80 (80% completed; 0.08134 secs elapsed) #> Iteration: 90 (90% completed; 0.0909 secs elapsed) #> Iteration: 100 (100% completed; 0.10042 secs elapsed)  ## Obtain predicted value on new grid of points for each pair of predictors ## Using only a 10-by-10 point grid to make example run quickly pred.resp.bivar <- PredictorResponseBivar(fit = fitkm, min.plot.dist = 1, ngrid = 10) #> Pair 1 out of 6 #> Pair 2 out of 6 #> Pair 3 out of 6 #> Pair 4 out of 6 #> Pair 5 out of 6 #> Pair 6 out of 6"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","title":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","text":"Function plot h function particular variable different levels (quantiles) second variable","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","text":"","code":"PredictorResponseBivarLevels(   pred.resp.df,   Z = NULL,   qs = c(0.25, 0.5, 0.75),   both_pairs = TRUE,   z.names = NULL )"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","text":"pred.resp.df object obtained running function PredictorResponseBivar Z n--M matrix predictor variables included h function. row represents observation column represents predictor. qs vector quantiles fix second variable both_pairs flag indicating whether, h(z1) plotted z2 fixed different levels, plotted reverse order well (h(z2) different levels z1) z.names optional vector names columns z","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","text":"long data frame name first predictor, name second predictor, value first predictor, quantile second predictor fixed, posterior mean estimate, posterior standard deviation estimated exposure response function","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarLevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cross-sections of the bivariate predictor-response function — PredictorResponseBivarLevels","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00873 secs elapsed) #> Iteration: 20 (20% completed; 0.0183 secs elapsed) #> Iteration: 30 (30% completed; 0.02788 secs elapsed) #> Iteration: 40 (40% completed; 0.03737 secs elapsed) #> Iteration: 50 (50% completed; 0.04679 secs elapsed) #> Iteration: 60 (60% completed; 0.05628 secs elapsed) #> Iteration: 70 (70% completed; 0.06576 secs elapsed) #> Iteration: 80 (80% completed; 0.07523 secs elapsed) #> Iteration: 90 (90% completed; 0.08476 secs elapsed) #> Iteration: 100 (100% completed; 0.09422 secs elapsed)  ## Obtain predicted value on new grid of points for each pair of predictors ## Using only a 10-by-10 point grid to make example run quickly pred.resp.bivar <- PredictorResponseBivar(fit = fitkm, min.plot.dist = 1, ngrid = 10) #> Pair 1 out of 6 #> Pair 2 out of 6 #> Pair 3 out of 6 #> Pair 4 out of 6 #> Pair 5 out of 6 #> Pair 6 out of 6 pred.resp.bivar.levels <- PredictorResponseBivarLevels(pred.resp.df = pred.resp.bivar,  Z = Z, qs = c(0.1, 0.5, 0.9))"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarPair.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bivariate predictor-response function on a new grid of points — PredictorResponseBivarPair","title":"Plot bivariate predictor-response function on a new grid of points — PredictorResponseBivarPair","text":"Plot bivariate predictor-response function new grid points","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarPair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bivariate predictor-response function on a new grid of points — PredictorResponseBivarPair","text":"","code":"PredictorResponseBivarPair(   fit,   y = NULL,   Z = NULL,   X = NULL,   whichz1 = 1,   whichz2 = 2,   whichz3 = NULL,   method = \"approx\",   prob = 0.5,   q.fixed = 0.5,   sel = NULL,   ngrid = 50,   min.plot.dist = 0.5,   center = TRUE,   ... )"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarPair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bivariate predictor-response function on a new grid of points — PredictorResponseBivarPair","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. whichz1 vector identifying first predictor (column Z) plotted whichz2 vector identifying second predictor (column Z) plotted whichz3 vector identifying third predictor set pre-specified fixed quantile (determined prob) method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details prob pre-specified quantile set third predictor (determined whichz3); defaults 0.5 (50th percentile) q.fixed vector quantiles fix remaining predictors Z sel logical expression indicating samples keep; defaults keeping second half samples ngrid number grid points cover range predictor (column Z) min.plot.dist specifies minimum distance new grid point needs observed data point order compute prediction; points computed center flag whether scale exposure-response function mean zero ... arguments pass prediction function","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarPair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bivariate predictor-response function on a new grid of points — PredictorResponseBivarPair","text":"data frame value first predictor, value second predictor, posterior mean estimate, posterior standard deviation","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseBivarPair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bivariate predictor-response function on a new grid of points — PredictorResponseBivarPair","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00875 secs elapsed) #> Iteration: 20 (20% completed; 0.01835 secs elapsed) #> Iteration: 30 (30% completed; 0.02794 secs elapsed) #> Iteration: 40 (40% completed; 0.03743 secs elapsed) #> Iteration: 50 (50% completed; 0.04691 secs elapsed) #> Iteration: 60 (60% completed; 0.05644 secs elapsed) #> Iteration: 70 (70% completed; 0.06591 secs elapsed) #> Iteration: 80 (80% completed; 0.07538 secs elapsed) #> Iteration: 90 (90% completed; 0.08513 secs elapsed) #> Iteration: 100 (100% completed; 0.09478 secs elapsed)  ## Obtain predicted value on new grid of points ## Using only a 10-by-10 point grid to make example run quickly pred.resp.bivar12 <- PredictorResponseBivarPair(fit = fitkm, min.plot.dist = 1, ngrid = 10)"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseUnivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","title":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","text":"Plot univariate predictor-response function new grid points","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseUnivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","text":"","code":"PredictorResponseUnivar(   fit,   y = NULL,   Z = NULL,   X = NULL,   which.z = 1:ncol(Z),   method = \"approx\",   ngrid = 50,   q.fixed = 0.5,   sel = NULL,   min.plot.dist = Inf,   center = TRUE,   z.names = colnames(Z),   ... )"},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseUnivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. .z vector identifying predictors (columns Z) plotted method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details ngrid number grid points cover range predictor (column Z) q.fixed vector quantiles fix remaining predictors Z sel logical expression indicating samples keep; defaults keeping second half samples min.plot.dist specifies minimum distance new grid point needs observed data point order compute prediction; points computed center flag whether scale exposure-response function mean zero z.names optional vector names columns z ... arguments pass prediction function","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseUnivar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","text":"long data frame predictor name, predictor value, posterior mean estimate, posterior standard deviation","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseUnivar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/PredictorResponseUnivar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot univariate predictor-response function on a new grid of points — PredictorResponseUnivar","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00873 secs elapsed) #> Iteration: 20 (20% completed; 0.01824 secs elapsed) #> Iteration: 30 (30% completed; 0.0277 secs elapsed) #> Iteration: 40 (40% completed; 0.03764 secs elapsed) #> Iteration: 50 (50% completed; 0.04726 secs elapsed) #> Iteration: 60 (60% completed; 0.05673 secs elapsed) #> Iteration: 70 (70% completed; 0.06613 secs elapsed) #> Iteration: 80 (80% completed; 0.07551 secs elapsed) #> Iteration: 90 (90% completed; 0.08488 secs elapsed) #> Iteration: 100 (100% completed; 0.09441 secs elapsed) pred.resp.univar <- PredictorResponseUnivar(fit = fitkm)"},{"path":"https://sngao.github.io/bkmr/reference/SamplePred.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain posterior samples of predictions at new points — SamplePred","title":"Obtain posterior samples of predictions at new points — SamplePred","text":"Obtains posterior samples E(Y) = h(Znew) + beta*Xnew g^{-1}[E(y)]","code":""},{"path":"https://sngao.github.io/bkmr/reference/SamplePred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain posterior samples of predictions at new points — SamplePred","text":"","code":"SamplePred(   fit,   Znew = NULL,   Xnew = NULL,   Z = NULL,   X = NULL,   y = NULL,   sel = NULL,   type = c(\"link\", \"response\"),   ... )"},{"path":"https://sngao.github.io/bkmr/reference/SamplePred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain posterior samples of predictions at new points — SamplePred","text":"fit object containing results returned kmbayes function Znew optional matrix new predictor values predict new h, row represents new observation. specified, defaults using observed Z values Xnew optional matrix new covariate values obtain predictions. specified, defaults using observed X values Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. y vector outcome data length n. sel vector selecting iterations BKMR fit retained inference. specified, default keeping every 10 iterations dropping first 50% samples, results fewer 100 iterations, 100 iterations kept type whether make predictions scale link response; relevant binomial outcome family ... arguments; currently used","code":""},{"path":"https://sngao.github.io/bkmr/reference/SamplePred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain posterior samples of predictions at new points — SamplePred","text":"matrix posterior samples new points","code":""},{"path":"https://sngao.github.io/bkmr/reference/SamplePred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain posterior samples of predictions at new points — SamplePred","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/SamplePred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain posterior samples of predictions at new points — SamplePred","text":"","code":"set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.01873 secs elapsed) #> Iteration: 20 (20% completed; 0.02835 secs elapsed) #> Iteration: 30 (30% completed; 0.03787 secs elapsed) #> Iteration: 40 (40% completed; 0.04737 secs elapsed) #> Iteration: 50 (50% completed; 0.05685 secs elapsed) #> Iteration: 60 (60% completed; 0.06635 secs elapsed) #> Iteration: 70 (70% completed; 0.07579 secs elapsed) #> Iteration: 80 (80% completed; 0.0852 secs elapsed) #> Iteration: 90 (90% completed; 0.09468 secs elapsed) #> Iteration: 100 (100% completed; 0.10416 secs elapsed)  med_vals <- apply(Z, 2, median) Znew <- matrix(med_vals, nrow = 1) h_true <- dat$HFun(Znew) set.seed(111) samps3 <- SamplePred(fitkm, Znew = Znew, Xnew = cbind(0)) head(samps3) #>           znew1 #> iter51 2.406482 #> iter52 1.934470 #> iter53 2.018921 #> iter54 1.440331 #> iter55 2.047760 #> iter56 1.907901"},{"path":"https://sngao.github.io/bkmr/reference/SimData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate dataset — SimData","title":"Simulate dataset — SimData","text":"Simulate predictor, covariate, continuous outcome data","code":""},{"path":"https://sngao.github.io/bkmr/reference/SimData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate dataset — SimData","text":"","code":"SimData(   n = 100,   M = 5,   sigsq.true = 0.5,   beta.true = 2,   hfun = 3,   Zgen = \"norm\",   ind = 1:2,   family = \"gaussian\" )"},{"path":"https://sngao.github.io/bkmr/reference/SimData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate dataset — SimData","text":"n Number observations M Number predictor variables generate sigsq.true Variance normally distributed residual error beta.true Coefficient covariate hfun integer 1 3 identifying predictor-response function generate Zgen Method generating matrix Z exposure variables, taking one values c(\"unif\", \"norm\", \"corr\", \"realistic\") ind select predictor(s) included h function; many predictors can included depend h function used. family description error distribution link function used model. Currently implemented gaussian binomial families.","code":""},{"path":"https://sngao.github.io/bkmr/reference/SimData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate dataset — SimData","text":"list containing parameter values generated variables simulated datasets","code":""},{"path":"https://sngao.github.io/bkmr/reference/SimData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate dataset — SimData","text":"hfun = 1: nonlinear function first predictor hfun = 2: linear function first two predictors product term hfun = 3: nonlinear nonadditive function first two predictor variables","code":""},{"path":"https://sngao.github.io/bkmr/reference/SimData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate dataset — SimData","text":"","code":"set.seed(5) dat <- SimData()"},{"path":"https://sngao.github.io/bkmr/reference/SingVarIntSummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Variable Interaction Summaries — SingVarIntSummaries","title":"Single Variable Interaction Summaries — SingVarIntSummaries","text":"Compare single-predictor health risks predictors Z fixed specific quantile predictors Z fixed second specific quantile.","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarIntSummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Variable Interaction Summaries — SingVarIntSummaries","text":"","code":"SingVarIntSummaries(   fit,   y = NULL,   Z = NULL,   X = NULL,   which.z = 1:ncol(Z),   qs.diff = c(0.25, 0.75),   qs.fixed = c(0.25, 0.75),   method = \"approx\",   sel = NULL,   z.names = colnames(Z),   ... )"},{"path":"https://sngao.github.io/bkmr/reference/SingVarIntSummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Variable Interaction Summaries — SingVarIntSummaries","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. .z vector indicating variables (columns Z) summary computed qs.diff vector indicating two quantiles compute single-predictor risk summary qs.fixed vector indicating two quantiles fix remaining exposures Z method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details sel logical expression indicating samples keep; defaults keeping second half samples z.names optional vector names columns z ... arguments pass prediction function","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarIntSummaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Variable Interaction Summaries — SingVarIntSummaries","text":"data frame containing (posterior mean) estimate posterior standard deviation single-predictor risk measures","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarIntSummaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single Variable Interaction Summaries — SingVarIntSummaries","text":"method == \"approx\", argument sel defaults second half MCMC iterations. method == \"exact\", argument sel defaults keeping every 10 iterations dropping first 50% samples, results fewer 100 iterations, 100 iterations kept guided examples additional information, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarIntSummaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Variable Interaction Summaries — SingVarIntSummaries","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.01051 secs elapsed) #> Iteration: 20 (20% completed; 0.02022 secs elapsed) #> Iteration: 30 (30% completed; 0.02984 secs elapsed) #> Iteration: 40 (40% completed; 0.03989 secs elapsed) #> Iteration: 50 (50% completed; 0.04939 secs elapsed) #> Iteration: 60 (60% completed; 0.05888 secs elapsed) #> Iteration: 70 (70% completed; 0.06832 secs elapsed) #> Iteration: 80 (80% completed; 0.07778 secs elapsed) #> Iteration: 90 (90% completed; 0.0872 secs elapsed) #> Iteration: 100 (100% completed; 0.09662 secs elapsed)  risks.int <- SingVarIntSummaries(fit = fitkm, method = \"exact\")"},{"path":"https://sngao.github.io/bkmr/reference/SingVarRiskSummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Variable Risk Summaries — SingVarRiskSummaries","title":"Single Variable Risk Summaries — SingVarRiskSummaries","text":"Compute summaries risks associated change single variable Z single level (quantile) second level (quantile), variables Z fixed specific level (quantile)","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarRiskSummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Variable Risk Summaries — SingVarRiskSummaries","text":"","code":"SingVarRiskSummaries(   fit,   y = NULL,   Z = NULL,   X = NULL,   which.z = 1:ncol(Z),   qs.diff = c(0.25, 0.75),   q.fixed = c(0.25, 0.5, 0.75),   method = \"approx\",   sel = NULL,   z.names = colnames(Z),   ... )"},{"path":"https://sngao.github.io/bkmr/reference/SingVarRiskSummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Variable Risk Summaries — SingVarRiskSummaries","text":"fit object containing results returned kmbayes function y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. .z vector indicating variables (columns Z) summary computed qs.diff vector indicating two quantiles q_1 q_2 compute h(z_{q2}) - h(z_{q1}) q.fixed vector quantiles fix remaining predictors Z method method obtaining posterior summaries vector new points. Options \"approx\" \"exact\"; defaults \"approx\", faster particularly large datasets; see details sel logical expression indicating samples keep; defaults keeping second half samples z.names optional vector names columns z ... arguments pass prediction function","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarRiskSummaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Variable Risk Summaries — SingVarRiskSummaries","text":"data frame containing (posterior mean) estimate posterior standard deviation single-predictor risk measures","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarRiskSummaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single Variable Risk Summaries — SingVarRiskSummaries","text":"method == \"approx\", argument sel defaults second half MCMC iterations. method == \"exact\", argument sel defaults keeping every 10 iterations dropping first 50% samples, results fewer 100 iterations, 100 iterations kept guided examples additional information, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/SingVarRiskSummaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Variable Risk Summaries — SingVarRiskSummaries","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00874 secs elapsed) #> Iteration: 20 (20% completed; 0.02421 secs elapsed) #> Iteration: 30 (30% completed; 0.03381 secs elapsed) #> Iteration: 40 (40% completed; 0.04335 secs elapsed) #> Iteration: 50 (50% completed; 0.05288 secs elapsed) #> Iteration: 60 (60% completed; 0.06242 secs elapsed) #> Iteration: 70 (70% completed; 0.07186 secs elapsed) #> Iteration: 80 (80% completed; 0.08131 secs elapsed) #> Iteration: 90 (90% completed; 0.09084 secs elapsed) #> Iteration: 100 (100% completed; 0.10868 secs elapsed)  risks.singvar <- SingVarRiskSummaries(fit = fitkm, method = \"exact\")"},{"path":"https://sngao.github.io/bkmr/reference/TracePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace plot — TracePlot","title":"Trace plot — TracePlot","text":"Trace plot","code":""},{"path":"https://sngao.github.io/bkmr/reference/TracePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace plot — TracePlot","text":"","code":"TracePlot(   fit,   par,   comp = 1,   sel = NULL,   main = \"\",   xlab = \"iteration\",   ylab = \"parameter value\",   ... )"},{"path":"https://sngao.github.io/bkmr/reference/TracePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace plot — TracePlot","text":"fit object containing results returned kmbayes function par parameter plot comp component parameter vector plot sel logical expression indicating samples keep; defaults keeping second half samples main title xlab x axis label ylab y axis label ... arguments pass onto plotting function","code":""},{"path":"https://sngao.github.io/bkmr/reference/TracePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace plot — TracePlot","text":"return value, generates plot","code":""},{"path":"https://sngao.github.io/bkmr/reference/TracePlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trace plot — TracePlot","text":"guided examples, go https://jenfb.github.io/bkmr/overview.html","code":""},{"path":"https://sngao.github.io/bkmr/reference/TracePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace plot — TracePlot","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00868 secs elapsed) #> Iteration: 20 (20% completed; 0.01814 secs elapsed) #> Iteration: 30 (30% completed; 0.03387 secs elapsed) #> Iteration: 40 (40% completed; 0.04336 secs elapsed) #> Iteration: 50 (50% completed; 0.0528 secs elapsed) #> Iteration: 60 (60% completed; 0.0623 secs elapsed) #> Iteration: 70 (70% completed; 0.07185 secs elapsed) #> Iteration: 80 (80% completed; 0.08139 secs elapsed) #> Iteration: 90 (90% completed; 0.09088 secs elapsed) #> Iteration: 100 (100% completed; 0.10038 secs elapsed)  TracePlot(fit = fitkm, par = \"beta\")  TracePlot(fit = fitkm, par = \"sigsq.eps\")  TracePlot(fit = fitkm, par = \"r\", comp = 1)"},{"path":"https://sngao.github.io/bkmr/reference/kmbayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian kernel machine regression — kmbayes","title":"Fit Bayesian kernel machine regression — kmbayes","text":"Fits Bayesian kernel machine regression (BKMR) model using Markov chain Monte Carlo (MCMC) methods.","code":""},{"path":"https://sngao.github.io/bkmr/reference/kmbayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian kernel machine regression — kmbayes","text":"","code":"kmbayes(   y,   Z,   X = NULL,   iter = 1000,   family = \"gaussian\",   id = NULL,   verbose = TRUE,   Znew = NULL,   starting.values = NULL,   control.params = NULL,   varsel = FALSE,   groups = NULL,   knots = NULL,   ztest = NULL,   rmethod = \"varying\",   est.h = FALSE )"},{"path":"https://sngao.github.io/bkmr/reference/kmbayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian kernel machine regression — kmbayes","text":"y vector outcome data length n. Z n--M matrix predictor variables included h function. row represents observation column represents predictor. X n--K matrix covariate data row represents observation column represents covariate. contain intercept column. iter number iterations run sampler family description error distribution link function used model. Currently implemented gaussian binomial families. id optional vector (length n) grouping factors fitting model random intercept. NULL random intercept included. verbose TRUE FALSE: flag indicating whether print intermediate diagnostic information model fitting. Znew optional matrix new predictor values predict h, row represents new observation. slow model fitting, can done post-processing step using SamplePred starting.values list starting values parameter. specified default values chosen. control.params list parameters specifying prior distributions tuning parameters MCMC algorithm. specified default values chosen. varsel TRUE FALSE: indicator whether conduct variable selection Z variables h groups optional vector (length M) group indicators fitting hierarchical variable selection varsel=TRUE. varsel=TRUE without group specification, component-wise variable selections performed. knots optional matrix knot locations implementing Gaussian predictive process Banerjee et al. (2008). Currently implemented models without random intercept. ztest optional vector indicating variables Z conduct variable selection (remaining variables forced model). rmethod predictors forced h function, method sampling r[m] values. Takes value 'varying' allow separate r[m] predictor; 'equal' force r[m] predictor; 'fixed' fix r[m] starting values est.h TRUE FALSE: indicator whether sample posterior distribution subject-specific effects h_i within main sampler. slow model fitting.","code":""},{"path":"https://sngao.github.io/bkmr/reference/kmbayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian kernel machine regression — kmbayes","text":"object class \"bkmrfit\" (containing posterior samples model fit), associated methods: print (.e., print.bkmrfit) summary (.e., summary.bkmrfit)","code":""},{"path":"https://sngao.github.io/bkmr/reference/kmbayes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Bayesian kernel machine regression — kmbayes","text":"Bobb, JF, Valeri L, Claus Henn B, Christiani DC, Wright RO, Mazumdar M, Godleski JJ, Coull BA (2015). Bayesian Kernel Machine Regression Estimating Health Effects Multi-Pollutant Mixtures. Biostatistics 16, . 3: 493-508. Banerjee S, Gelfand AE, Finley AO, Sang H (2008). Gaussian predictive process models large spatial data sets. Journal Royal Statistical Society: Series B (Statistical Methodology), 70(4), 825-848.","code":""},{"path":[]},{"path":"https://sngao.github.io/bkmr/reference/kmbayes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian kernel machine regression — kmbayes","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00867 secs elapsed) #> Iteration: 20 (20% completed; 0.01816 secs elapsed) #> Iteration: 30 (30% completed; 0.02767 secs elapsed) #> Iteration: 40 (40% completed; 0.03711 secs elapsed) #> Iteration: 50 (50% completed; 0.04651 secs elapsed) #> Iteration: 60 (60% completed; 0.06269 secs elapsed) #> Iteration: 70 (70% completed; 0.07214 secs elapsed) #> Iteration: 80 (80% completed; 0.08155 secs elapsed) #> Iteration: 90 (90% completed; 0.09104 secs elapsed) #> Iteration: 100 (100% completed; 0.1005 secs elapsed)"},{"path":"https://sngao.github.io/bkmr/reference/print.bkmrfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print basic summary of BKMR model fit — print.bkmrfit","title":"Print basic summary of BKMR model fit — print.bkmrfit","text":"print method class \"bkmrfit\"","code":""},{"path":"https://sngao.github.io/bkmr/reference/print.bkmrfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print basic summary of BKMR model fit — print.bkmrfit","text":"","code":"# S3 method for bkmrfit print(x, digits = 5, ...)"},{"path":"https://sngao.github.io/bkmr/reference/print.bkmrfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print basic summary of BKMR model fit — print.bkmrfit","text":"x object class \"bkmrfit\" digits number digits show printing ... arguments passed methods.","code":""},{"path":"https://sngao.github.io/bkmr/reference/print.bkmrfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print basic summary of BKMR model fit — print.bkmrfit","text":"return value, prints basic summary fit console","code":""},{"path":"https://sngao.github.io/bkmr/reference/print.bkmrfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print basic summary of BKMR model fit — print.bkmrfit","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00873 secs elapsed) #> Iteration: 20 (20% completed; 0.0183 secs elapsed) #> Iteration: 30 (30% completed; 0.02782 secs elapsed) #> Iteration: 40 (40% completed; 0.03754 secs elapsed) #> Iteration: 50 (50% completed; 0.04694 secs elapsed) #> Iteration: 60 (60% completed; 0.05637 secs elapsed) #> Iteration: 70 (70% completed; 0.06582 secs elapsed) #> Iteration: 80 (80% completed; 0.07521 secs elapsed) #> Iteration: 90 (90% completed; 0.09229 secs elapsed) #> Iteration: 100 (100% completed; 0.10175 secs elapsed) fitkm #> Fitted object of class 'bkmrfit' #> Iterations: 100  #> Outcome family: gaussian   #> Model fit on: 2023-12-06 16:45:35.598388"},{"path":"https://sngao.github.io/bkmr/reference/summary.bkmrfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing BKMR model fits — summary.bkmrfit","title":"Summarizing BKMR model fits — summary.bkmrfit","text":"summary method class \"bkmrfit\"","code":""},{"path":"https://sngao.github.io/bkmr/reference/summary.bkmrfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing BKMR model fits — summary.bkmrfit","text":"","code":"# S3 method for bkmrfit summary(   object,   q = c(0.025, 0.975),   digits = 5,   show_ests = TRUE,   show_MH = TRUE,   ... )"},{"path":"https://sngao.github.io/bkmr/reference/summary.bkmrfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing BKMR model fits — summary.bkmrfit","text":"object object class \"bkmrfit\" q quantiles posterior distribution show digits number digits show printing show_ests logical; TRUE, prints summary statistics posterior distribution show_MH logical; TRUE, prints acceptance rates Metropolis-Hastings algorithm ... arguments passed methods.","code":""},{"path":"https://sngao.github.io/bkmr/reference/summary.bkmrfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing BKMR model fits — summary.bkmrfit","text":"return value, prints detailed summary fit console","code":""},{"path":"https://sngao.github.io/bkmr/reference/summary.bkmrfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing BKMR model fits — summary.bkmrfit","text":"","code":"## First generate dataset set.seed(111) dat <- SimData(n = 50, M = 4) y <- dat$y Z <- dat$Z X <- dat$X  ## Fit model with component-wise variable selection ## Using only 100 iterations to make example run quickly ## Typically should use a large number of iterations for inference set.seed(111) fitkm <- kmbayes(y = y, Z = Z, X = X, iter = 100, verbose = FALSE, varsel = TRUE) #> Iteration: 10 (10% completed; 0.00869 secs elapsed) #> Iteration: 20 (20% completed; 0.01833 secs elapsed) #> Iteration: 30 (30% completed; 0.02787 secs elapsed) #> Iteration: 40 (40% completed; 0.03736 secs elapsed) #> Iteration: 50 (50% completed; 0.04708 secs elapsed) #> Iteration: 60 (60% completed; 0.05664 secs elapsed) #> Iteration: 70 (70% completed; 0.06613 secs elapsed) #> Iteration: 80 (80% completed; 0.07587 secs elapsed) #> Iteration: 90 (90% completed; 0.08553 secs elapsed) #> Iteration: 100 (100% completed; 0.09511 secs elapsed) summary(fitkm) #> Fitted object of class 'bkmrfit' #> Iterations: 100  #> Outcome family: gaussian   #> Model fit on: 2023-12-06 16:45:35.873976  #> Running time:  0.09534 secs  #>  #> Acceptance rates for Metropolis-Hastings algorithm: #>               param      rate #> 1            lambda 0.1010101 #> 2 r/delta (overall) 0.5252525 #> 3 r/delta  (move 1) 0.3255814 #> 4 r/delta  (move 2) 0.6785714 #>  #> Parameter estimates (based on iterations 51-100): #>       param    mean      sd   q_2.5  q_97.5 #> 1      beta 1.88931 0.08176 1.72388 2.04660 #> 2 sigsq.eps 0.50905 0.10964 0.33635 0.74966 #> 3        r1 0.76502 0.13487 0.49609 0.94809 #> 4        r2 1.22987 0.08528 1.09164 1.36021 #> 5        r3 0.00000 0.00000 0.00000 0.00000 #> 6        r4 0.00606 0.01004 0.00000 0.02415 #> 7    lambda 4.56075 0.55773 4.17943 6.14513 #>  #> Posterior inclusion probabilities: #>   variable  PIP #> 1       z1 1.00 #> 2       z2 1.00 #> 3       z3 0.00 #> 4       z4 0.28 #> NULL"},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"bkmr-022","dir":"Changelog","previous_headings":"","what":"bkmr 0.2.2","title":"bkmr 0.2.2","text":"CRAN release: 2022-03-28","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bkmr 0.2.2","text":"Corrected code produced warning length > 1 coercion logical Update functions use deprecated functions dplyr package","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"minor-changes-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"bkmr 0.2.2","text":"longer export following functions: CalcGroupPIPs, CalcWithinGroupPIPs, CalcPIPs typically calculated using function ExtractPIPs ComputePostmeanHnew.approx ComputePostmeanHnew.exact typically calculated using function ComputePostmeanHnew set_verbose_opts called internally Expanded function documentation adding example code","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"bkmr-021","dir":"Changelog","previous_headings":"","what":"bkmr 0.2.1","title":"bkmr 0.2.1","text":"CRAN release: 2022-03-04","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bkmr 0.2.1","text":"allowable values starting parameter r[m] parameters updated follows longer truncated single value (varsel = FALSE rmethod = \"varying\") can equal 0 (varsel = TRUE) Error longer generated starting values h.hat positive checking class object, use inherits() instead class()","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"bkmr-020","dir":"Changelog","previous_headings":"","what":"bkmr 0.2.0","title":"bkmr 0.2.0","text":"CRAN release: 2017-03-24","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"major-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"bkmr 0.2.0","text":"Added ability binomial outcome family implementing probit regression within kmbayes() Removed computation subject-specific effects h[] within kmbayes(), always desired, greatly slows model fitting still done setting option est.h = TRUE kmbayes function posterior samples h[] can now obtained via post-processing SamplePred function; alternatively, posterior summaries (mean, variance) can obtained via post-processing ComputePostmeanHnew function Added ability use exact estimates posterior mean variance specifying argument method = 'exact' within post-processing functions (e.g., OverallRiskSummaries(), PredictorResponseUnivar())","code":""},{"path":"https://sngao.github.io/bkmr/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bkmr 0.2.0","text":"Fixed PredictorResponseBivarLevels() argument both_pairs = TRUE (#4)","code":""}]
